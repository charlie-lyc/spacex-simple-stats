{"version":3,"sources":["spacexlogo.jpeg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/RocketDetails.js","components/Launch.js","App.js","index.js"],"names":["LaunchItem","item","id","name","date_local","success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","fetchPolicy","loading","error","data","message","launches","map","launch","ROCKET_QUERY","RocketDetails","variables","rocket","active","cost_per_launch","classNames","LAUNCH_QUERY","Launch","useParams","flight_number","App","src","spaceXLogo","alt","style","margin","display","width","height","exact","path","component","httpLink","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c8fcbe28.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacexlogo.9bf807c0.jpeg\";","import React from 'react'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nconst LaunchItem = ({ item }) => {\n    \n    const {\n        id, \n        // flight_number,\n        name,\n        date_local,\n        success,\n        // cores,\n        // rocket\n    } = item\n\n\n    return (\n        <div className=\"card card-body mb-3\">\n            {/* { flight_number }: { name } */}\n\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>\n                        Mission{' '}:&nbsp;\n                        { success === true && <span className=\"text-success\">{ name }</span> }\n                        { success === false && <span className=\"text-danger\">{ name }</span> }\n                        { success === null && <span className=\"text-dark\">{ name }</span> }\n                    </h4>\n                    <p>\n                        Date{' '}:&nbsp; \n                        <Moment format=\"YYYY-MM-DD HH:mm\">{ date_local }</Moment>\n                    </p>\n                </div>\n                <div className=\"col-md-3\">\n                    {/* <button className=\"btn btn-secondary\">Launch Details</button> */}\n                    <Link to={`/launch/${id}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nconst MissionKey = () => {\n    \n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"></span>\n                &nbsp;= Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"></span>\n                &nbsp;= Fail\n            </p>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n    query GetLaunches {\n        launches {\n            id\n            flight_number\n            name\n            date_local\n            success\n            cores {\n                core\n                flight\n                landing_type\n                landing_success\n            }\n            rocket\n        }\n    }\n`\n\nconst Launches = () => {\n\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY, {\n        fetchPolicy: 'cache-first' // Default\n    })\n\n    if (loading) return <h3>Loading...</h3>\n    if (error) return <h3>{ `Error! ${error.message}` }</h3>\n\n    return (\n        <div>\n            <h3>SpaceX Launches</h3>\n            <MissionKey></MissionKey>\n            {   \n                /* \n                    data.launches.map(launch => \n                        <div key={ launch.id }>\n                            { launch.flight_number }: { launch.name }\n                        </div> \n                    ) \n                */\n\n                data.launches.map(launch => <LaunchItem key={ launch.id } item={ launch }></LaunchItem>)\n            }\n        </div>\n    )\n}\n\nexport default Launches\n","import React from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport classNames from 'classnames'\n\nconst ROCKET_QUERY = gql`\n    query GetRocket($id: String!) {\n        rocket(id: $id) {\n            name\n            type\n            active\n            cost_per_launch\n        }\n    }\n`\n\nconst RocketDetails = ({ id }) => {\n\n    const { loading, error, data } = useQuery(ROCKET_QUERY, {\n        variables: { id }\n    })\n    if (loading) return <h3>Loading...</h3>\n    if (error) return <h3>{ `Error! ${error.message}` }</h3>\n\n    const {\n        name,\n        // type,\n        active,\n        cost_per_launch\n    } = data.rocket\n\n    return (\n        <div>\n            <h5 className=\"mb-3\">Rocket Details</h5>            \n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    Rocket : { name }\n                </li>\n                <li className=\"list-group-item\">\n                    Active : \n                    <span className={ classNames({ 'text-success': active, 'text-danger': !active }) }>\n                        { active ? ' Yes' : ' No'}\n                    </span>\n                </li>\n                <li className=\"list-group-item\">\n                    Cost : { cost_per_launch }\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default RocketDetails\n","import React from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport { useParams, Link } from 'react-router-dom'\nimport Moment from 'react-moment'\nimport RocketDetails from './RocketDetails'\n\nconst LAUNCH_QUERY = gql`\n    query GetLaunch($id: String!) {  \n        launch(id: $id) {\n            flight_number\n            name\n            date_local\n            success\n            cores {\n                core\n                flight\n                landing_type\n                landing_success\n            }\n            rocket\n        }\n    }\n`\n\nconst Launch = () => {\n\n    const { id } = useParams()\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: { id }\n    })\n    if (loading) return <h3>Loading...</h3>\n    if (error) return <h3>{ `Error! ${error.message}` }</h3>\n\n    const {\n        flight_number,\n        name,\n        date_local,\n        success,\n        // cores,\n        rocket\n    } = data.launch\n\n    return (\n        <div className=\"container\">\n            {/* <h3>Launch Details</h3>\n            { flight_number }: { name }<br></br> */}\n            <h4>\n                Mission : <span className=\"text-dark\">{ name }</span>\n            </h4>\n            <hr />\n            <h5 className=\"mb-3\">Launch Details</h5>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    Flight Number : { flight_number }\n                </li>\n                <li className=\"list-group-item\">\n                    Date : <Moment format=\"YYYY-MM-DD HH:mm\">{ date_local }</Moment>\n                </li>\n                <li className=\"list-group-item\">\n                    Launch Success : \n                    { success === true && <span className=\"text-success\"> Yes</span> }\n                    { success === false && <span className=\"text-danger\"> No</span> }                \n                    { success === null && <span className=\"text-dark\"> Not yet</span> }\n                </li>\n            </ul>\n            <br></br>\n            <RocketDetails id={ rocket }></RocketDetails>\n            <hr />\n            <Link to='/' className=\"btn btn-secondary\">&lt; Back</Link>\n        </div>\n    )\n}\n\nexport default Launch\n","import React from 'react'\nimport spaceXLogo from './spacexlogo.jpeg'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nconst App = () => {\n\n    return (\n        <Router>\n            <div className=\"container\">\n                {/* <h1>SpaceX</h1> */}\n                <img src={ spaceXLogo } alt=\"spacex logo\" style={{ margin: 'auto', display: 'block', width: 500, height: 350 }} />\n                \n                {/* <Launches></Launches> */}\n                <Route exact path=\"/\" component={ Launches }></Route>\n                <Route exact path=\"/launch/:id\" component={ Launch }></Route>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport { \n    ApolloClient,\n    ApolloProvider,\n    InMemoryCache,\n    createHttpLink   \n} from \"@apollo/client\"\n\n/* Authentication : Cookie */ \nconst httpLink = createHttpLink({\n    /* 서버와 클라이언트가 다른 도메인일 때 */\n    // uri: 'http://localhost:5000/graphql',\n    // credentials: 'include'\n    /* 서버와 클라이언트가 같은 도메인일 때 */\n    uri: '/graphql',\n    credentials: 'same-origin'\n})\n\nconst client = new ApolloClient({\n    // uri: 'http://localhost:5000/graphql',\n    cache: new InMemoryCache(),\n    link: httpLink\n})\n\nReactDOM.render(\n    <ApolloProvider client={ client }>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}